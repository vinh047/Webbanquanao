async function submitForm(e) {
  e.preventDefault();
  
  const isValid = validateForm();
  if (!isValid) return;

  const formData = new FormData(e.target);
  const trangthai = new URLSearchParams(window.location.search).get("trangthai") || "";

  try {
    const response = await fetch("/User-form/Login_Form/userdb_func.php", {
      method: "POST",
      body: formData
    });

    if (!response.ok) {
      throw new Error("L·ªói HTTP: " + response.status);
    }
    const rawText = await response.text();
    console.log("Raw response text:", rawText);
    const responseData = JSON.parse(rawText);

    console.log("TRANGTHAI = ", trangthai);
    console.log("RESPONSE = ", responseData);
;
  
    // Reset l·ªói c≈©
    e.target.querySelectorAll(".form-control").forEach(input => {
      input.classList.remove("is-invalid", "border-danger");
      input.classList.add("border-dark");
    
      const group = input.closest(".input-group");
      const container = group || input;
      const next = container.nextElementSibling;
      if (next && next.classList.contains("invalid-feedback")) {
        next.remove();
      }
    });
    

    // ‚úÖ ƒêƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω th√†nh c√¥ng
    if (responseData.status === "LOGIN_SUCCESS" || responseData.status === "REGISTER_SUCCESS") {
      const role = responseData.role;
      const online = responseData.online;
      if (trangthai === "dangky" && responseData.status === "REGISTER_SUCCESS") {
        alert("ƒêƒÉng k√Ω th√†nh c√¥ng! M·ªùi b·∫°n ƒëƒÉng nh·∫≠p.");
        window.location.href = "?trangthai=dangnhap";
        return;
      }
    
      if (  responseData.status === "LOGIN_SUCCESS") {
        if (role === 1 && online === 1) {
          try {
            console.log("üü° Tr∆∞·ªõc khi syncCartAfterLogin()");
            if (typeof window.syncCartAfterLogin === "function") {
              await window.syncCartAfterLogin();
              renderMiniCart();
              updateCartCount();
            }
            console.log("‚úÖ Sau khi syncCartAfterLogin()");
          } catch (err) {
            console.error("‚ùå syncCartAfterLogin failed:", err);
          }

          // Redirect sau khi ƒë·ªìng b·ªô
          setTimeout(() => {
            alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
            window.location.href = location.origin + "/index.php";
          }, 100);
          return;
        }

        if ([2, 3, 4].includes(role)  ||  online === 0 ) {
          alert("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a");
          return;
        }
      }

      return;
    }

    // ‚úÖ Qu√™n m·∫≠t kh·∫©u ‚Üí g·ª≠i OTP
    if (trangthai === "quenmatkhau" && responseData.status === "FORGOT_SUCCESS") {
      alert("ƒê√£ g·ª≠i OTP ƒë·∫øn email. Vui l√≤ng nh·∫≠p m√£ OTP.");
      const url = new URL(window.location.href);
      url.searchParams.set("trangthai", "nhapotp");
      window.location.href = url.href;
      return;
    }
    
    if (trangthai === "nhapotp" && responseData.status === "OTP_SUCCESS") {
      alert("X√°c th·ª±c OTP th√†nh c√¥ng. Vui l√≤ng ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.");
      const url = new URL(window.location.href);
      url.searchParams.set("trangthai", "resetpswd");
      window.location.href = url.href;
      return;
    }
    
    if (trangthai === "resetpswd" && responseData.status === "RESET_SUCCESS") {
      alert("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! M·ªùi b·∫°n ƒëƒÉng nh·∫≠p.");
      window.location.href = "?trangthai=dangnhap";
      return;
    }
    if (trangthai === "resetpswd" && responseData.status === "SAME_AS_OLD_PASSWORD") {
      addError(e.target.querySelector('[name="new_password"]'), "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©.");
      return;
    }

    // ‚úÖ X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    switch (responseData.status) {
      case "NAME_EXISTS":
        addError(e.target.querySelector('[name="name"]'), "T√™n ƒë√£ t·ªìn t·∫°i.");
        break;
      case "EMAIL_EXISTS":
        addError(e.target.querySelector('[name="email"]'), "Email ƒë√£ t·ªìn t·∫°i.");
        break;
      case "PHONE_EXISTS":
        addError(e.target.querySelector('[name="sdt"]'), "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i.");
        break;
      case "INVALID_PASSWORD":
        addError(e.target.querySelector('[name="pswd"]'), "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.");
        break;
      case "NO_ACCOUNT":
        addError(e.target.querySelector('[name="email"]'), "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.");
        break;
      case "MISSING_FIELDS":
        addError(e.target.querySelector('[name="name"]'), "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
        break;
      case "MISSING_EMAIL":
        addError(e.target.querySelector('[name="email"]'), "Vui l√≤ng nh·∫≠p email.");
        break;
      case "INVALID_OTP":
        addError(e.target.querySelector('[name="otp"]'), "M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        break;
          
      default:
        addError(e.target.querySelector('[name="name"]'), "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
        break;
    }
  } catch (err) {
    addError(e.target.querySelector('[name="name"]'), "L·ªói m√°y ch·ªß ho·∫∑c k·∫øt n·ªëi.");
  }
}